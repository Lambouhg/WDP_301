import mongoose from "mongoose";
import dotenv from "dotenv";

dotenv.config({ path: ".env.local", override: true });

const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
  throw new Error("‚ö†Ô∏è MONGODB_URI kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong .env.local");
}

// üõ† D√πng bi·∫øn to√†n c·ª•c ƒë·ªÉ tr√°nh t·∫°o nhi·ªÅu k·∫øt n·ªëi
let cached = global.mongoose;

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

const connectDB = async () => {
  if (cached.conn) {
    return cached.conn; // D√πng l·∫°i k·∫øt n·ªëi c≈©
  }

  if (!cached.promise) {
    console.log("üì° ƒêang k·∫øt n·ªëi MongoDB...");
    try {
      cached.promise = mongoose.connect(MONGODB_URI, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
        bufferCommands: false, // ‚ö° T·∫Øt buffer gi√∫p gi·∫£m ƒë·ªô tr·ªÖ
        autoIndex: false, // ‚ö° T·∫Øt autoIndex tr√™n production ƒë·ªÉ t·ªëi ∆∞u t·ªëc ƒë·ªô
        maxPoolSize: 10, // ‚ö° Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng k·∫øt n·ªëi ƒë·ªìng th·ªùi
      }).then((mongoose) => {
        console.log("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!");
        return mongoose;
      });

      cached.conn = await cached.promise;
      return cached.conn;
    } catch (error) {
      console.error("‚ùå L·ªói khi k·∫øt n·ªëi MongoDB:", error);
      cached.promise = null; // Reset cache n·∫øu l·ªói
      throw new Error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn MongoDB!");
    }
  }

  return cached.promise;
};

export default connectDB;
