// src/pages/api/job/all.js
import connectDB from "../../../lib/mongodb";
import Job from "../../../models/job";
import mongoose from "mongoose";
import "../../../models/company";


export default async function handler(req, res) {
    await connectDB(); // K·∫øt n·ªëi DB

    if (req.method !== "GET") {
        return res.status(405).json({ message: "Method Not Allowed" });
    }

    try {
        let { jobId, jobType, categories } = req.query;

        // üìå N·∫øu c√≥ jobId, tr·∫£ v·ªÅ chi ti·∫øt c√¥ng vi·ªác
        if (jobId) {
            if (!mongoose.Types.ObjectId.isValid(jobId)) {
                return res.status(400).json({ message: "Invalid job ID" });
            }

            const job = await Job.findById(jobId).populate("companyId", "name");
            if (!job) {
                return res.status(404).json({ message: "Job not found" });
            }

            return res.status(200).json(job);
        }

        // T·∫°o b·ªô l·ªçc truy v·∫•n MongoDB
        let filter = { status: "Live" };

        // N·∫øu c√≥ `jobType` th√¨ th√™m ƒëi·ªÅu ki·ªán l·ªçc
        if (jobType) {
            filter.jobType = jobType;
        }

        // N·∫øu c√≥ `categories` th√¨ th√™m ƒëi·ªÅu ki·ªán l·ªçc
        if (categories) {
            filter.categories = { $in: categories.split(",") };
        }

        // ƒê·∫øm t·ªïng s·ªë c√¥ng vi·ªác ph√π h·ª£p v·ªõi b·ªô l·ªçc
        const totalJobs = await Job.countDocuments(filter);

        // Truy v·∫•n danh s√°ch c√¥ng vi·ªác theo b·ªô l·ªçc
        const jobs = await Job.find(filter).populate("companyId", "name");

        // Ki·ªÉm tra v√† ƒë·∫£m b·∫£o m·ªói c√¥ng vi·ªác c√≥ categories l√† m·∫£ng (tr√°nh l·ªói frontend)
        jobs.forEach((job) => {
            if (!Array.isArray(job.categories)) {
                job.categories = []; // G√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† m·∫£ng tr·ªëng n·∫øu kh√¥ng c√≥ categories
            }
        });

        return res.status(200).json({
            jobs,
            totalJobs,
        });
    } catch (error) {
        return res.status(500).json({ message: "Error fetching jobs", error: error.message });
    }
}

